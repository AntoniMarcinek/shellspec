#!/bin/sh
#shellcheck disable=SC2004,SC2016

set -eu

export SHELLSPEC_VERSION='0.11.3'

export SHELLSPEC_ROOT
export SHELLSPEC_LIB
export SHELLSPEC_LIBEXEC
export SHELLSPEC_TMPDIR
export SHELLSPEC_SPECDIR
export SHELLSPEC_LOAD_PATH

export SHELLSPEC_SHELL=''
export SHELLSPEC_TIME=''
export SHELLSPEC_TMPBASE=''
export SHELLSPEC_TIME_LOG=''
export SHELLSPEC_EXAMPLES_LOG=''
export SHELLSPEC_FORMATTER='progress'
export SHELLSPEC_COLOR=''
export SHELLSPEC_REQUIRES=''
export SHELLSPEC_SPEC_FAILURE_CODE=101
export SHELLSPEC_UNEXPECTED_STDERR=102
export SHELLSPEC_SKIP_MESSAGE=none
export SHELLSPEC_WARNINGS=error
export SHELLSPEC_FAIL_FAST_COUNT=''
export SHELLSPEC_FAIL_NO_EXAMPLES=''
export SHELLSPEC_JOBS=0
export SHELLSPEC_DRYRUN=''
export SHELLSPEC_FOCUS=''
export SHELLSPEC_BANNER=''
export SHELLSPEC_MODE='runner'
export SHELLSPEC_ENV_FROM=''
export SHELLSPEC_PATTERN="*_spec.sh"
export SHELLSPEC_UNIXTIME=''

[ -t 1 ] && SHELLSPEC_COLOR=1

abort() {
  if [ "$SHELLSPEC_COLOR" ]; then
    printf '\033[31m%s\033[0m\n' "$@" >&2
  else
    printf '%s\n' "$@" >&2
  fi
  exit 1
}

warn() {
  if [ "$SHELLSPEC_COLOR" ]; then
    printf '\033[33m%s\033[0m\n' "$*" >&2
  else
    printf '%s\n' "$*" >&2
  fi
}

detect_shellspec_root() {
  [ "${SHELLSPEC_ROOT:-}" ] && return 0
  cwd=$PWD p=$1
  while [ -L "$p" ]; do
    [ "$p" = "${p%/*}" ] || cd "${p%/*}"
    p="$(readlink "$p")" || return 1
  done
  [ "$p" = "${p%/*}" ] || cd "${p%/*}"
  SHELLSPEC_ROOT=$PWD
  cd "$cwd"
}

if ! detect_shellspec_root "$0"; then
  abort "Detection of the shellspec root directory failed." \
        "Specify SHELLSPEC_ROOT environment variable."
fi

if ! [ -x "$SHELLSPEC_ROOT/${0##*/}" ]; then
  abort "'shellspec' not found in \$SHELLSPEC_ROOT ($SHELLSPEC_ROOT)"
fi

: "${SHELLSPEC_LIB:=$SHELLSPEC_ROOT/lib}"
: "${SHELLSPEC_LIBEXEC:=$SHELLSPEC_ROOT/libexec}"
: "${SHELLSPEC_TMPDIR:=${TMPDIR:-}}"
: "${SHELLSPEC_TMPDIR:=/tmp}"

SHELLSPEC_SPECDIR=$PWD/spec
SHELLSPEC_LOAD_PATH=$SHELLSPEC_SPECDIR:$SHELLSPEC_LIB:$SHELLSPEC_LIB/formatters

# shellcheck source=lib/libexec/shellspec.sh
. "$SHELLSPEC_LIB/libexec/shellspec.sh"

SHELLSPEC_UNIXTIME=$(date +%s)
SHELLSPEC_TMPBASE="${SHELLSPEC_TMPDIR%/}/shellspec.$SHELLSPEC_UNIXTIME.$$"
SHELLSPEC_TIME_LOG="$SHELLSPEC_TMPBASE/time.log"
SHELLSPEC_EXAMPLES_LOG="$SHELLSPEC_TMPBASE/examples.log"
SHELLSPEC_BANNER="$SHELLSPEC_SPECDIR/banner"

if [ -z "$SHELLSPEC_TIME" ]; then
  SHELLSPEC_TIME="$SHELLSPEC_LIBEXEC/shellspec-time.sh"
  if command_path time > /dev/null; then
    SHELLSPEC_TIME="time -p"
  elif command_path bash > /dev/null; then
    SHELLSPEC_TIME="bash $SHELLSPEC_TIME"
  elif command_path ksh > /dev/null; then
    SHELLSPEC_TIME="ksh $SHELLSPEC_TIME"
  fi
fi

usage() {
cat <<USAGE
Usage: ${0##*/} [options] [files or directories]

  -s, --shell SHELL                   Specify a path of shell [default: current shell]
      --[no-]fail-fast[=COUNT]        Abort the run after a certain number of failures [default: 1]
      --[no-]fail-no-examples         Fail if no examples found [default: disabled]
  -r, --require MODULE                Require a file
  -e, --env NAME=VALUE                Set environment variable
      --env-from ENV-SCRIPT           Set environment variable from script file
  -w, --warnings LEVEL                Set warnings level
                                        none (do not show warnings)
                                        notice (show warnings but not treats as error)
                                        error (show warnings and treats as error) [default]
                                        failure (treats warnings as failures)
  -j, --jobs JOBS                     Number of parallel jobs to run (0 jobs means disabled)
      --dry-run                       Print the formatter output without running any examples

  **** Output ****

      --[no-]banner                   Show banner if exist 'spec/banner' [default: enabled]
  -f, --format FORMATTER              Choose a formatter.
                                        [p]rogress (dots) [default]
                                        [d]ocumentation (group and example names)
                                        [t]ap
                                        debug (for developer)
                                        custom formatter name
      --force-color, --force-colour   Force the output to be in color, even if the output is not a TTY
      --no-color, --no-colour         Force the output to not be in color, even if the output is a TTY
      --skip-message VERBOSE          Mute skip message
                                        none (do not mute any messages) [default]
                                        moderate (mute repeated messages)
                                        quiet (mute repeated messages and non-temporarily messages)

  **** Filtering ****

    You can select examples by appending the line numbers to the filename

      e.g. shellspec path/to/a_spec.sh:10:20

      --focus                         Run focused groups / examples only
                                        To focus, prepend 'f' to groups / examples in specfiles
                                        e.g. Describe -> fDescribe, It -> fIt

  **** Utility ****

      --init                          Initialize your project with shellspec
      --count                         Count the number of specfiles and examples
      --list-specfiles                List the specfiles
      --list-examples                 List the examples
      --syntax-check                  Syntax check of the specfiles without running any examples
      --translate                     Output translated specfile
      --task [TASK]                   Run task. If TASK is not specified, show the task list
  -v, --version                       Display the version
  -h, --help                          You're looking at it
USAGE
exit
}

parse_options() {
  length=$# params=''
  while [ $# -gt 0 ]; do
    case $1 in
      --banner) SHELLSPEC_BANNER="$SHELLSPEC_SPECDIR/banner" ;;
      --no-banner) SHELLSPEC_BANNER='' ;;
      -f | --format) [ $# -ge 2 ] || abort 'Require FORMATTER.'
        case $2 in
          p) SHELLSPEC_FORMATTER=progress ;;
          d) SHELLSPEC_FORMATTER=documentation ;;
          t) SHELLSPEC_FORMATTER=tap ;;
          *) SHELLSPEC_FORMATTER=$2 ;;
        esac
        shift ;;
      --force-color | --force-colour) SHELLSPEC_COLOR=1 ;;
      --no-color | --no-colour) SHELLSPEC_COLOR='' ;;
      -s | --shell) [ $# -ge 2 ] || abort 'Require SHELL.'
        SHELLSPEC_SHELL=$2
        shift ;;
      -j | --jobs) [ $# -ge 2 ] || abort 'Require JOBS.'
        SHELLSPEC_JOBS=$2
        shift ;;
      --dry-run) SHELLSPEC_DRYRUN=1 ;;
      --focus) SHELLSPEC_FOCUS=1 ;;
      -e | --env) [ $# -ge 2 ] || abort 'Require NAME=VALUE.'
        #shellcheck disable=SC2034
        case $2 in
          *=*) name=${2%%=*} value=${2#*=} ;;
          *) name=$2 value='' ;;
        esac
        case $name in ([!a-zA-Z_]*) abort 'Invalid environment name.'; esac
        case $name in (*[!a-zA-Z0-9_]*) abort 'Invalid environment name.'; esac
        eval "export $name=\$value"
        shift ;;
      --env-from) [ $# -ge 2 ] || abort 'Require ENV-SCRIPT.'
        [ -e "$2" ] || abort "Not found ENV-SCRIPT '$2'."
        case $2 in
          /* | ./* | ../*) SHELLSPEC_ENV_FROM=$2 ;;
          *) SHELLSPEC_ENV_FROM="./$2" ;;
        esac
        shift ;;
      -r | --require) [ $# -ge 2 ] || abort 'Require PATH.'
        SHELLSPEC_REQUIRES="$SHELLSPEC_REQUIRES${SHELLSPEC_REQUIRES:+:}$2"
        shift ;;
      -w | --warnings) [ $# -ge 2 ] || abort 'Require LEVEL.'
        case $2 in (none|notice|error|failure) ;;
          *) abort 'Invalid LEVEL.'
        esac
        SHELLSPEC_WARNINGS="$2"
        shift ;;
      --skip-message) [ $# -ge 2 ] || abort 'Require VERBOSE.'
        case $2 in (none|moderate|quiet) ;;
          *) abort 'Invalid VERBOSE.'
        esac
        SHELLSPEC_SKIP_MESSAGE="$2"
        shift ;;
      --fail-fast | --fail-fast=*)
        SHELLSPEC_FAIL_FAST_COUNT=${1#*=}
        case $SHELLSPEC_FAIL_FAST_COUNT in (*[!0-9]*)
          SHELLSPEC_FAIL_FAST_COUNT=1
        esac ;;
      --no-fail-fast) SHELLSPEC_FAIL_FAST_COUNT='' ;;
      --fail-no-examples) SHELLSPEC_FAIL_NO_EXAMPLES=1 ;;
      --no-fail-no-examples) SHELLSPEC_FAIL_NO_EXAMPLES='' ;;
      --init | --task | --translate | --syntax-check | \
      --count | --list-specfiles | --list-examples) SHELLSPEC_MODE=${1#--} ;;
      -h | --help) usage ;;
      -v | --version) echo "$SHELLSPEC_VERSION"; exit 0 ;;
      -*) abort "Unknown option '$1'" ;;
      *) params="$params \"\${$(($length - $# + 1))}\""
    esac
    shift
  done
}

read_dot_file "${XDG_CONFIG_HOME:-}" "shellspec/options" parse_options
read_dot_file "${HOME:-}" ".shellspec" parse_options
read_dot_file "." ".shellspec" parse_options
read_dot_file "." ".shellspec-local" parse_options
if [ $# -gt 0 ]; then
  parse_options "$@"
  eval "set -- $params"
fi

[ "$SHELLSPEC_SHELL" ] || SHELLSPEC_SHELL=$(current_shell "$0")
if [ -z "$SHELLSPEC_SHELL" ]; then
  warn "Failed to detect the current shell," \
       "because the ps command does not exist or not compatible."
  warn "Use 'sh' instead. You can specify the shell with --shell option."
fi

shell=$(command_path "${SHELLSPEC_SHELL:-sh}") ||:
if ! [ -x "${shell%% *}" ]; then
  abort "Not found specified shell: $SHELLSPEC_SHELL"
fi
SHELLSPEC_SHELL=$shell

if ! $SHELLSPEC_SHELL -c 'exit $((0))' 2>/dev/null; then
  abort "Unsupported shell (require arithmetic expansion): $SHELLSPEC_SHELL"
fi

case $SHELLSPEC_MODE in
  runner | translator | syntax-check | count | list-specfiles | list-examples)
    [ $# -eq 0 ] && set -- 'spec'
    for specfile in "$@"; do
      [ -e "${specfile%%:*}" ] || abort "Not found path: ${specfile%%:*}"
      case $specfile in (*:*)
        case ${specfile#*:} in (*[!0-9:]*)
          abort "Specified line number is wrong: $specfile"
        esac
      esac
    done
esac

if [ "$SHELLSPEC_ENV_FROM" ]; then
  exec="$SHELLSPEC_LIBEXEC/shellspec-load-env.sh"
else
  exec="$SHELLSPEC_LIBEXEC/shellspec-${SHELLSPEC_MODE}.sh"
fi
eval exec "$SHELLSPEC_SHELL" "\"$exec\"" ${1+'"$@"'}
