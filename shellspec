#!/bin/sh
#shellcheck disable=SC2004,SC2016

[ "$PPID" ] || { echo "Unsupported shell. (Bourne shell?)" >&2; exit 1; }

set -e -u

export SHELLSPEC_VERSION='0.23.0-dev'
export SHELLSPEC_PATH=''
export SHELLSPEC_ROOT=''
export SHELLSPEC_PROJECT_ROOT=''
export SHELLSPEC_PROJECT_NAME=''
export SHELLSPEC_LIB=''
export SHELLSPEC_LIBEXEC=''
export SHELLSPEC_SPECDIR=''
export SHELLSPEC_LOAD_PATH=''
export SHELLSPEC_SHELL=''
export SHELLSPEC_TIME=''
export SHELLSPEC_TMPBASE=''
export SHELLSPEC_TIME_LOG=''
export SHELLSPEC_EXAMPLES_LOG=''
export SHELLSPEC_FORMATTER='progress'
export SHELLSPEC_GENERATORS=''
export SHELLSPEC_REPORTDIR=''
export SHELLSPEC_COLOR=''
export SHELLSPEC_REQUIRES=''
export SHELLSPEC_SPEC_FAILURE_CODE=101
export SHELLSPEC_STDERR_OUTPUT_CODE=102
export SHELLSPEC_SYNTAX_ERROR_CODE=103
export SHELLSPEC_SKIP_MESSAGE=verbose
export SHELLSPEC_WARNING_AS_FAILURE=1
export SHELLSPEC_FAIL_FAST_COUNT=''
export SHELLSPEC_FAIL_NO_EXAMPLES=''
export SHELLSPEC_FAIL_LOW_COVERAGE=''
export SHELLSPEC_JOBS=0
export SHELLSPEC_DRYRUN=''
export SHELLSPEC_FOCUS_FILTER=''
export SHELLSPEC_TAG_FILTER=''
export SHELLSPEC_EXAMPLE_FILTER=''
export SHELLSPEC_BANNER=''
export SHELLSPEC_MODE='runner'
export SHELLSPEC_LIST=''
export SHELLSPEC_COUNT_FILE=''
export SHELLSPEC_ENV_FROM=''
export SHELLSPEC_PATTERN="*_spec.sh"
export SHELLSPEC_UNIXTIME=''
export SHELLSPEC_TMPDIR=${TMPDIR:-/tmp}
export SHELLSPEC_LOGFILE=/dev/tty
export SHELLSPEC_DEPRECATION_LOG=1
export SHELLSPEC_DEPRECATION_LOGFILE="deprecation.log"
export SHELLSPEC_KEEP_TEMPDIR=''
export SHELLSPEC_DEFAULT_PATH=spec
export SHELLSPEC_INFILE=file
export SHELLSPEC_RANDOM=''
export SHELLSPEC_SEED=''
export SHELLSPEC_COVERAGE_SETUP=''
export SHELLSPEC_COVERAGE_ENV=''
export SHELLSPEC_COVERAGE_DIR=''
export SHELLSPEC_KCOV=''
export SHELLSPEC_KCOV_COMPATIBLE_SHELL=''
export SHELLSPEC_KCOV_VERSION=''
export SHELLSPEC_KCOV_PATH='kcov'
export SHELLSPEC_KCOV_COMMON_OPTS=''
export SHELLSPEC_KCOV_OPTS=''
export SHELLSPEC_KCOV_FILENAME=''
export SHELLSPEC_KCOV_IN_FILE=''
export SHELLSPEC_PROFILER=''
export SHELLSPEC_PROFILER_LOG=''
export SHELLSPEC_PROFILER_LIMIT=10
export SHELLSPEC_PROFILER_REPORT="profiler.log"
export SHELLSPEC_DEFECT_SIGNALS=''
export SHELLSPEC_DEFECT_READONLY=''
export SHELLSPEC_DEFECT_REDEFINE=''
export SHELLSPEC_DEFECT_SHELL_FLAG=''
export SHELLSPEC_KILL='kill'
export SHELLSPEC_SHEBANG_MULTIARG=''
export SHELLSPEC_QUICK=''
export SHELLSPEC_QUICK_FILE=".shellspec-quick.log"

#shellcheck disable=SC2039
export SHELLSPEC_HOSTNAME=${HOSTNAME:-localhost}

# Based on https://github.com/ko1nksm/readlinkf
# Changed the interpretation of symlinks to my preference (Change cd -P to -L)
readlinkf() {
  [ ${1:+x} ] || return 1; p=$1; until [ "${p%/}" = "$p" ]; do p=${p%/}; done
  [ -e "$p" ] && p=$1; [ -d "$1" ] && p=$p/; set 10 "$PWD" "${OLDPWD:-}"
  CDPATH="" cd -L "$2" && while [ "$1" -gt 0 ]; do set "$1" "$2" "$3" "${p%/*}"
    [ "$p" = "$4" ] || { CDPATH="" cd -L "${4:-/}" || break; p=${p##*/}; }
    [ ! -L "$p" ] && p=${PWD%/}${p:+/}$p && set "$@" "${p:-/}" && break
    set $(($1-1)) "$2" "$3" "$p"; p=$(ls -dl "$p") || break; p=${p#*" $4 -> "}
  done 2>/dev/null; cd -L "$2" && OLDPWD=$3 && [ ${5+x} ] && printf '%s\n' "$5"
}

if ! SHELLSPEC_PATH=$(readlinkf "$0"); then
 echo "Failed to detect shellspec real path." >&2
 exit 1
fi
SHELLSPEC_ROOT="${SHELLSPEC_PATH%/*}"
SHELLSPEC_LIB="$SHELLSPEC_ROOT/lib"
SHELLSPEC_REPORTERLIB="$SHELLSPEC_LIB/libexec/reporter"

if [ "${1:-}" = "-" ]; then
  echo "SHELLSPEC_LIB=\"$SHELLSPEC_LIB\""
  echo ". \"\$SHELLSPEC_LIB/libexec/shellspec.sh\""
  echo 'shell=$(current_shell "$0" "$$")'
  echo 'shellspec=$(command_path shellspec)'
  echo 'exec $shell $shellspec "$0" "$@"'
  return 0
fi

[ -t 1 ] && SHELLSPEC_COLOR=1

# shellcheck source=lib/libexec/shellspec.sh
. "$SHELLSPEC_LIB/libexec/shellspec.sh"

unixtime SHELLSPEC_UNIXTIME

SHELLSPEC_LIBEXEC="$SHELLSPEC_ROOT/libexec"
SHELLSPEC_PROJECT_ROOT="$PWD"
SHELLSPEC_PROJECT_NAME="${SHELLSPEC_PROJECT_ROOT##*/}"
SHELLSPEC_SPECDIR="$SHELLSPEC_PROJECT_ROOT/spec"
SHELLSPEC_REPORTDIR="$SHELLSPEC_PROJECT_ROOT/report"
SHELLSPEC_COVERAGE_DIR="$SHELLSPEC_PROJECT_ROOT/coverage"
SHELLSPEC_LOAD_PATH="$SHELLSPEC_SPECDIR:$SHELLSPEC_LIB:$SHELLSPEC_REPORTERLIB"
SHELLSPEC_TMPBASE="${SHELLSPEC_TMPDIR%/}/shellspec.$SHELLSPEC_UNIXTIME.$$"
SHELLSPEC_TIME_LOG="$SHELLSPEC_TMPBASE/time.log"
SHELLSPEC_EXAMPLES_LOG="$SHELLSPEC_TMPBASE/examples.log"
SHELLSPEC_PROFILER_LOG="$SHELLSPEC_TMPBASE/profiler.log"
SHELLSPEC_BANNER="$SHELLSPEC_SPECDIR/banner"

SHELLSPEC_TIME=$(command_path time) &&:
if [ "$SHELLSPEC_TIME" ]; then
  SHELLSPEC_TIME="$SHELLSPEC_TIME -p"
else
  SHELLSPEC_TIME="$SHELLSPEC_LIBEXEC/shellspec-time.sh"
  if command_path bash > /dev/null; then
    SHELLSPEC_TIME="bash $SHELLSPEC_TIME"
  elif command_path ksh > /dev/null; then
    SHELLSPEC_TIME="ksh $SHELLSPEC_TIME"
  fi
fi

while IFS= read -r option; do
  SHELLSPEC_KCOV_COMMON_OPTS="$SHELLSPEC_KCOV_COMMON_OPTS$option "
done <<HERE
--include-path=.
--include-pattern=.sh
--exclude-pattern=/.shellspec,/spec/,/coverage/,/report/
--path-strip-level=1
HERE
SHELLSPEC_KCOV_FILENAME="$SHELLSPEC_PROJECT_NAME [specfiles]"
SHELLSPEC_KCOV_IN_FILE="$SHELLSPEC_TMPBASE/kcov/$SHELLSPEC_KCOV_FILENAME"

usage() {
while IFS= read -r line; do echo "$line"; done <<USAGE
Usage: shellspec [options] [files or directories]

  -s, --shell SHELL               Specify a path of shell [default: current shell]
      --[no-]fail-fast[=COUNT]    Abort the run after a certain number of failures [default: 1]
      --[no-]fail-no-examples     Fail if no examples found [default: disabled]
      --[no-]fail-low-coverage    Fail on low coverage [default: disabled]
                                    The coverage threshold is specified by the coverage option
  -r, --require MODULE            Require a file
  -e, --env NAME=VALUE            Set environment variable
      --env-from ENV-SCRIPT       Set environment variable from script file
      --random TYPE[:SEED]        Run examples by the specified random type
                                    [none]      run in the defined order [default]
                                    [specfiles] randomize the order of specfiles
                                    [examples]  randomize the order of examples (slow)
  -j, --jobs JOBS                 Number of parallel jobs to run (0 jobs means disabled)
  -q, --[no-]quick                Run not-passed examples if it exists, otherwise run all [default: disabled]
      --[no-]warning-as-failure   Treat warning as failure [default: enabled]
      --dry-run                   Print the formatter output without running any examples
      --keep-tempdir              Do not cleanup temporary directory [default: disabled]

  **** Output ****

      --[no-]banner               Show banner if exist 'spec/banner' [default: enabled]
  -f, --format FORMATTER          Choose a formatter to use for display
                                    [p]rogress      dots [default]
                                    [d]ocumentation group and example names
                                    [t]ap           TAP format
                                    [j]unit         JUnit XML (time attributre with --profile)
                                    [f]ailures      file:line:message (suitable for editors integration)
                                    [null]          do not display anything
                                    [debug]         for developer
                                    custom formatter name
  -o, --output GENERATOR          Choose a generator(s) to generate a report file(s)
                                    You can use the same name as FORMATTER
                                    Multiple options can be specified [default: not specified]
      --[no-]color                Enable or disable color [default: enabled if the output is a TTY]
      --skip-message VERBOSITY    Mute skip message
                                    [verbose]  do not mute any messages [default]
                                    [moderate] mute repeated messages
                                    [quiet]    mute repeated messages and non-temporary messages
  -p, --[no-]profile              Enable profiling of examples and list the slowest examples
      --profile-limit N           List the top N slowest examples [default: 10]
      --show-deprecations         Display deprecations details [default]
      --hide-deprecations         Hide deprecations details

  **** Ranges / Filters / Focus ****

    You can select examples range to run by appending the line numbers or id to the filename

      shellspec path/to/a_spec.sh:10:20     # Run the groups or examples that includes lines 10 and 20
      shellspec path/to/a_spec.sh:@1-5:@1-6 # Run the 5th and 6th groups/examples defined in the 1st group

    You can filter examples to run with the following options

  -F, --focus                     Run focused groups / examples only
  -P, --pattern PATTERN           Load files matching pattern [default: "*_spec.sh"]
  -E, --example PATTERN           Run examples whose names include PATTERN
  -T, --tag TAG[:VALUE]           Run examples with the specified TAG
  -D, --default-path PATH         Set the default path where looks for examples [defualt: "spec"]

  **** Coverage ****

      --[no-]kcov                 Enable coverage using kcov [default: disabled]
                                    Note: Requires kcov and bash, parallel execution is ignored.
      --kcov-path PATH            Specify kcov path [default: kcov]
      --kcov-options OPTIONS      Kcov options to overwrite and add (coverage limits, coveralls id, etc)
                                    Default specified options:
                                      --include-path=.
                                      --include-pattern=.sh
                                      --exclude-pattern=/.shellspec,/spec/,/coverage/,/report/
                                      --path-strip-level=1
                                    To include files without extension, specify --include-pattern
                                    without '.sh' and filter with --include-*/--exclude-* options

  **** Utility ****

      --init                      Initialize your project with ShellSpec
      --count                     Count the number of specfiles and examples
      --list LIST                 List the specfiles / examples
                                    [specfiles]       list the specfiles
                                    [examples]        list the examples with id
                                    [examples:id]     alias for examples
                                    [examples:lineno] list the examples with lineno
                                    [debug]           for developer
                                    affected by --random but TYPE is ignored
      --syntax-check              Syntax check of the specfiles without running any examples
      --translate                 Output translated specfile
      --task [TASK]               Run task. If TASK is not specified, show the task list
  -v, --version                   Display the version
  -h, --help                      You're looking at it
USAGE
}

parse_options() {
  length=$# params='' formatters="progress documentation tap junit failures"
  while [ $# -gt 0 ]; do
    case $1 in
      --banner) SHELLSPEC_BANNER="$SHELLSPEC_SPECDIR/banner" ;;
      --no-banner) SHELLSPEC_BANNER='' ;;
      -f | --format) [ "${2:-}" ] || invalid 'Require FORMATTER.'
        case $2 in (*[!a-z0-9_]*) invalid 'Invalid FORMATTER name.'; esac
        SHELLSPEC_FORMATTER=$2
        for formatter in $formatters; do
          case $formatter in ($2*) SHELLSPEC_FORMATTER=$formatter; esac
        done
        shift ;;
      -o | --output) [ "${2:-}" ] || invalid 'Require GENERATOR.'
        case $2 in (*[!a-z0-9_]*) invalid 'Invalid GENERATOR name.'; esac
        SHELLSPEC_GENERATORS="$SHELLSPEC_GENERATORS $2"
        for formatter in $formatters; do
          case $formatter in ($2*)
            SHELLSPEC_GENERATORS="${SHELLSPEC_GENERATORS% *} $formatter"
          esac
        done
        shift ;;
      --force-color | --force-colour) SHELLSPEC_COLOR=1 ;;
      --color | --colour) SHELLSPEC_COLOR=1 ;;
      --no-color | --no-colour) SHELLSPEC_COLOR='' ;;
      -s | --shell) [ "${2:-}" ] || invalid 'Require SHELL.'
        SHELLSPEC_SHELL=$2
        shift ;;
      --random) [ "${2:-}" ] || invalid 'Require TYPE[:SEED].'
        case ${2%%:*} in
          none) SHELLSPEC_RANDOM='' ;;
          specfiles|examples) SHELLSPEC_RANDOM=${2%%:*} ;;
          *) invalid 'Invalid TYPE[:SEED].'
        esac
        case $2 in (*:*) SHELLSPEC_SEED=${2#*:} ;; (*) SHELLSPEC_SEED=''; esac
        shift ;;
      -j | --jobs) [ "${2:-}" ] || invalid 'Require JOBS.'
        SHELLSPEC_JOBS=$2
        shift ;;
      -q | --quick) SHELLSPEC_QUICK=1 ;;
      +q | --no-quick) SHELLSPEC_QUICK='' ;;
      --dry-run) SHELLSPEC_DRYRUN=1 ;;
      --keep-tempdir) SHELLSPEC_KEEP_TEMPDIR=1 ;;
      -F | --focus) SHELLSPEC_FOCUS_FILTER=1 ;;
      -P | --pattern) [ "${2:-}" ] || invalid 'Require PATTERN.'
        SHELLSPEC_PATTERN=$2
        shift ;;
      -E | --example) [ "${2:-}" ] || invalid 'Require PATTERN.'
        if [ "$SHELLSPEC_EXAMPLE_FILTER" ]; then
          SHELLSPEC_EXAMPLE_FILTER="$SHELLSPEC_EXAMPLE_FILTER|$2"
        else
          SHELLSPEC_EXAMPLE_FILTER="$2"
        fi
        shift ;;
      -T | --tag) [ "${2:-}" ] || invalid 'Require TAG.'
        SHELLSPEC_TAG_FILTER="${SHELLSPEC_TAG_FILTER%,},$2,"
        shift ;;
      -D | --default-path) [ "${2:-}" ] || invalid 'Require PATH.'
        SHELLSPEC_DEFAULT_PATH=$2
        shift ;;
      -e | --env) [ "${2:-}" ] || invalid 'Require NAME=VALUE.'
        #shellcheck disable=SC2034
        case $2 in
          *=*) name=${2%%=*} value=${2#*=} ;;
          *) name=$2 value='' ;;
        esac
        case $name in ([!a-zA-Z_]*) invalid 'Invalid environment name.'; esac
        case $name in (*[!a-zA-Z0-9_]*) invalid 'Invalid environment name.'; esac
        eval "export $name=\$value"
        shift ;;
      --env-from) [ "${2:-}" ] || invalid 'Require ENV-SCRIPT.'
        [ -e "$2" ] || invalid "Not found ENV-SCRIPT '$2'."
        case $2 in
          /* | ./* | ../*) SHELLSPEC_ENV_FROM=$2 ;;
          *) SHELLSPEC_ENV_FROM="./$2" ;;
        esac
        shift ;;
      -r | --require) [ "${2:-}" ] || invalid 'Require PATH.'
        SHELLSPEC_REQUIRES="$SHELLSPEC_REQUIRES${SHELLSPEC_REQUIRES:+:}$2"
        shift ;;
      --warning-as-failure) SHELLSPEC_WARNING_AS_FAILURE=1 ;;
      --no-warning-as-failure) SHELLSPEC_WARNING_AS_FAILURE='' ;;
      --skip-message) [ "${2:-}" ] || invalid 'Require VERBOSE.'
        case $2 in (verbose|moderate|quiet) ;;
          *) invalid 'Invalid VERBOSE.'
        esac
        SHELLSPEC_SKIP_MESSAGE="$2"
        shift ;;
      --fail-fast | --fail-fast=*)
        SHELLSPEC_FAIL_FAST_COUNT=${1#*=}
        case $SHELLSPEC_FAIL_FAST_COUNT in (*[!0-9]*)
          SHELLSPEC_FAIL_FAST_COUNT=1
        esac ;;
      --no-fail-fast) SHELLSPEC_FAIL_FAST_COUNT='' ;;
      --fail-no-examples) SHELLSPEC_FAIL_NO_EXAMPLES=1 ;;
      --no-fail-no-examples) SHELLSPEC_FAIL_NO_EXAMPLES='' ;;
      --fail-low-coverage) SHELLSPEC_FAIL_LOW_COVERAGE=1 ;;
      --no-fail-low-coverage) SHELLSPEC_FAIL_LOW_COVERAGE='' ;;
      --kcov) SHELLSPEC_KCOV=1 ;;
      --no-kcov) SHELLSPEC_KCOV='' ;;
      --kcov-path) [ "${2:-}" ] || invalid 'Require PATH.'
        SHELLSPEC_KCOV_PATH="$2"
        shift ;;
      --kcov-common-options) [ "${2:-}" ] || invalid 'Require OPTIONS.'
        SHELLSPEC_KCOV_COMMON_OPTS="$2"
        warn "--kcov-common-options is deprecated, merge into --kcov-options"
        shift ;;
      --kcov-options) [ "${2:-}" ] || invalid 'Require OPTIONS.'
        SHELLSPEC_KCOV_OPTS="${SHELLSPEC_KCOV_OPTS}${SHELLSPEC_KCOV_OPTS:+ }$2"
        shift ;;
      -p | --profile) SHELLSPEC_PROFILER=1 ;;
      +p | --no-profile) SHELLSPEC_PROFILER='' ;;
      --profile-limit) [ "${2:-}" ] || invalid 'Require N.'
        SHELLSPEC_PROFILER_LIMIT="$2"
        shift ;;
      --show-deprecations) SHELLSPEC_DEPRECATION_LOG=1 ;;
      --hide-deprecations) SHELLSPEC_DEPRECATION_LOG='' ;;
      --init | --task | --translate | --syntax-check) SHELLSPEC_MODE=${1#--} ;;
      --count) SHELLSPEC_MODE=list SHELLSPEC_LIST='' ;;
      --list) [ "${2:-}" ] || invalid 'Require LIST.'
        case $2 in (specfiles|examples|examples:id|examples:lineno|debug) ;;
          *) invalid 'Invalid LIST.'
        esac
        SHELLSPEC_MODE=list SHELLSPEC_LIST=$2
        shift ;;
      -h | --help) usage && exit 0;;
      -v | --version) echo "$SHELLSPEC_VERSION" && exit 0 ;;
      -*) invalid "Unknown option '$1'." ;;
      *) params="$params \"\${$(($length - $# + 1))}\""
    esac
    shift
  done
}

invalid() {
  [ "${options_file:-}" ] && set -- "$@" "[$options_file]"
  abort "$@"
}

options_file() {
  options_file=$1
  read_options_file "$1" parse_options
  unset options_file
}

enum_options_file options_file
[ $# -gt 0 ] && parse_options "$@" && eval "set -- $params"

if [ ! "$SHELLSPEC_SHELL" ]; then
  [ "$SHELLSPEC_KCOV" ] && shell=bash || shell=$(current_shell "$0" "$$")
  SHELLSPEC_SHELL=$shell
fi
if [ -z "$SHELLSPEC_SHELL" ]; then
  warn "Failed to detect the current shell," \
       "because the ps command does not exist or not compatible."
  warn "Use 'sh' instead. You can specify the shell with --shell option."
fi
shell=$(command_path "${SHELLSPEC_SHELL:-sh}") ||:
[ -x "${shell%% *}" ] || abort "Not found specified shell: $SHELLSPEC_SHELL."
SHELLSPEC_SHELL=$shell

{
  inspection="$SHELLSPEC_LIBEXEC/shellspec-inspection.sh"
  if ! eval "$($SHELLSPEC_SHELL "$inspection" || echo false)" &&:; then
    abort "Shell inspection failed. This shell is not supported.$SHELLSPEC_LF" \
      "(It is not a POSIX shell or basic functionality is defective)."
  fi

  if [ "$SHELLSPEC_DEFECT_SIGNALS" ];then
    # posh 0.8.5 implements kill but not support any signals. meaningless.
    SHELLSPEC_KILL=$(command_path kill) ||:
    if [ ! "$SHELLSPEC_KILL" ]; then
      # For example posh 0.13.2 does not implement kill as builtin
      # and debian 10 docker image does not have kill command installed.
      warn "kill not found. You may encounter errors with some features."
      SHELLSPEC_KILL="kill"
    fi
  fi

  if [ "$SHELLSPEC_DEFECT_REDEFINE" ]; then
    # busybox 1.1.3
    warn "Unsupported shell (builtin commands can not redefine)."
  fi

  if [ "$SHELLSPEC_DEFECT_READONLY" ]; then
    # pdksh 5.2.14 (debian-2.2), ksh 93q, ksh 93r
    # busybox 1.15.3, busybox 1.19.4
    warn "Unsupported shell (readonly malfunction)."
  fi

  if [ "$SHELLSPEC_DEFECT_SHELL_FLAG" ]; then
    # posh 0.10.2
    warn "Unsupported shell (shell flag handling broken)."
  fi
}

if [ "$SHELLSPEC_KCOV" ]; then
  SHELLSPEC_KCOV_VERSION=$(kcov_version) || abort "Kcov not found."
  if [ "$(kcov_version_number "$SHELLSPEC_KCOV_VERSION")" -lt 35 ]; then
    abort "Kcov v35 or later required." \
      "[current: ${SHELLSPEC_KCOV_VERSION:-unknown (kcov v30 or below)}]"
  fi
  if [ ! "$SHELLSPEC_KCOV_COMPATIBLE_SHELL" ]; then
    abort "Require to use bash to run kcov (e.g: --shell bash)."
  fi
fi

if [ "$SHELLSPEC_PROFILER" ] && [ "$SHELLSPEC_JOBS" -gt 0 ]; then
  abort "Cannot be specified profiler and parallel execution at the same time."
fi

case $SHELLSPEC_MODE in (runner | list | translate | syntax-check)
  [ $# -eq 0 ] && set -- "$SHELLSPEC_DEFAULT_PATH"
  for p in "$@"; do
    [ -e "${p%%:*}" ] || abort "Not found path: ${p%%:*}."
    [ -f "${p%%:*}" ] && SHELLSPEC_PATTERN="$SHELLSPEC_PATTERN|${p%%:*}"
    case $p in (*:*)
      [ -d "${p%%:*}" ] && abort "Invalid range for directory: $p."
      check_range "${p#*:}" || abort "Invalid range: $p."
    esac
  done
esac

if [ "$SHELLSPEC_MODE" = "runner" ] && [ "$SHELLSPEC_QUICK" ]; then
  if [ -e "$SHELLSPEC_QUICK_FILE" ]; then
    count=$# pattern='' line='' specfile=''
    match_files_pattern pattern "$@"
    while read_quickfile line specfile; do
      ! match_pattern "$specfile" "$pattern" || set -- "$@" "$line"
      SHELLSPEC_PATTERN="$SHELLSPEC_PATTERN|$specfile"
    done < "$SHELLSPEC_QUICK_FILE"
    if [ "$#" -gt "$count" ] && shift "$count"; then
      info "Run only non-passed examples the last time they ran." >&2
    fi
  else
    if ! ( : > "$SHELLSPEC_QUICK_FILE" ) 2>/dev/null; then
      warn "Failed to write the quick log for the --quick option."
    fi
  fi
fi

case $SHELLSPEC_MODE in (runner | list)
  if [ "$SHELLSPEC_RANDOM" ] && [ ! "$SHELLSPEC_SEED" ]; then
    random_seed SHELLSPEC_SEED "$SHELLSPEC_UNIXTIME" "$$"
    info "Randomized with seed $SHELLSPEC_SEED" >&2
  fi
esac

[ "$SHELLSPEC_ENV_FROM" ] && exec="load-env" || exec=$SHELLSPEC_MODE
exec="$SHELLSPEC_LIBEXEC/shellspec-${exec}.sh"
eval exec "$SHELLSPEC_SHELL" "\"$exec\"" ${1+'"$@"'}
